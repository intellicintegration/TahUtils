# This file was generated by generate_datatypes.py
from dataclasses import dataclass
from typing import Annotated, get_origin, get_args

from tahutils.tahu.sparkplug_b import MetricDataType


class BaseType:
	code = None
	python_type = None

def get_type_code(obj):
	if get_origin(obj) is Annotated:
		dt =  get_args(obj)[0]
	dt = obj
	if isinstance(dt, BaseType):
		return dt.code
	return None


class Unknown(BaseType):
	code = MetricDataType.Unknown
	python_type = None

class Int8(BaseType):
	code = MetricDataType.Int8
	python_type = int

class Int16(BaseType):
	code = MetricDataType.Int16
	python_type = int

class Int32(BaseType):
	code = MetricDataType.Int32
	python_type = int

class Int64(BaseType):
	code = MetricDataType.Int64
	python_type = int

class UInt8(BaseType):
	code = MetricDataType.UInt8
	python_type = int

class UInt16(BaseType):
	code = MetricDataType.UInt16
	python_type = int

class UInt32(BaseType):
	code = MetricDataType.UInt32
	python_type = int

class UInt64(BaseType):
	code = MetricDataType.UInt64
	python_type = int

class Float(BaseType):
	code = MetricDataType.Float
	python_type = float

class Double(BaseType):
	code = MetricDataType.Double
	python_type = float

class Boolean(BaseType):
	code = MetricDataType.Boolean
	python_type = bool

class String(BaseType):
	code = MetricDataType.String
	python_type = str

class DateTime(BaseType):
	code = MetricDataType.DateTime
	python_type = int

class Text(BaseType):
	code = MetricDataType.Text
	python_type = str

class UUID(BaseType):
	code = MetricDataType.UUID
	python_type = str

class DataSet(BaseType):
	code = MetricDataType.DataSet
	python_type = None

class Bytes(BaseType):
	code = MetricDataType.Bytes
	python_type = bytes

class File(BaseType):
	code = MetricDataType.File
	python_type = None

class Template(BaseType):
	code = MetricDataType.Template
	python_type = None
